-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelTinyPlus where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsTinyPlus

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsTinyPlus.Ident -> Result
transIdent x = case x of
  AbsTinyPlus.Ident string -> failure x

transProgram :: AbsTinyPlus.Program -> Result
transProgram x = case x of
  AbsTinyPlus.Program topdefs block -> failure x

transTopDef :: AbsTinyPlus.TopDef -> Result
transTopDef x = case x of
  AbsTinyPlus.FnDef type_ ident args block -> failure x

transArg :: AbsTinyPlus.Arg -> Result
transArg x = case x of
  AbsTinyPlus.Arg type_ ident -> failure x
  AbsTinyPlus.ArrRef type_ ident -> failure x
  AbsTinyPlus.VarRef type_ ident -> failure x

transBlock :: AbsTinyPlus.Block -> Result
transBlock x = case x of
  AbsTinyPlus.Block decls stmt -> failure x
  AbsTinyPlus.NoDecl stmt -> failure x

transDecl :: AbsTinyPlus.Decl -> Result
transDecl x = case x of
  AbsTinyPlus.Decl type_ item -> failure x

transItem :: AbsTinyPlus.Item -> Result
transItem x = case x of
  AbsTinyPlus.NoInit ident -> failure x
  AbsTinyPlus.Init ident expr -> failure x
  AbsTinyPlus.ArrInit ident expr -> failure x

transStmt :: AbsTinyPlus.Stmt -> Result
transStmt x = case x of
  AbsTinyPlus.Seq stmt1 stmt2 -> failure x
  AbsTinyPlus.Empty -> failure x
  AbsTinyPlus.BStmt block -> failure x
  AbsTinyPlus.Ass lvalue expr -> failure x
  AbsTinyPlus.Incr lvalue -> failure x
  AbsTinyPlus.Decr lvalue -> failure x
  AbsTinyPlus.Ret expr -> failure x
  AbsTinyPlus.Cond expr block -> failure x
  AbsTinyPlus.CondElse expr block1 block2 -> failure x
  AbsTinyPlus.While expr block -> failure x
  AbsTinyPlus.For ident expr block -> failure x
  AbsTinyPlus.Print expr -> failure x

transType :: AbsTinyPlus.Type -> Result
transType x = case x of
  AbsTinyPlus.Int -> failure x
  AbsTinyPlus.Str -> failure x
  AbsTinyPlus.Bool -> failure x

transLValue :: AbsTinyPlus.LValue -> Result
transLValue x = case x of
  AbsTinyPlus.EVar ident -> failure x
  AbsTinyPlus.EArrEl ident expr -> failure x

transExpr :: AbsTinyPlus.Expr -> Result
transExpr x = case x of
  AbsTinyPlus.Elval lvalue -> failure x
  AbsTinyPlus.ELitInt integer -> failure x
  AbsTinyPlus.ELitTrue -> failure x
  AbsTinyPlus.ELitFalse -> failure x
  AbsTinyPlus.EApp ident exprs -> failure x
  AbsTinyPlus.EString string -> failure x
  AbsTinyPlus.Neg expr -> failure x
  AbsTinyPlus.Not expr -> failure x
  AbsTinyPlus.EMul expr1 mulop expr2 -> failure x
  AbsTinyPlus.EAdd expr1 addop expr2 -> failure x
  AbsTinyPlus.ERel expr1 relop expr2 -> failure x
  AbsTinyPlus.EAnd expr1 expr2 -> failure x
  AbsTinyPlus.EOr expr1 expr2 -> failure x

transAddOp :: AbsTinyPlus.AddOp -> Result
transAddOp x = case x of
  AbsTinyPlus.Plus -> failure x
  AbsTinyPlus.Minus -> failure x

transMulOp :: AbsTinyPlus.MulOp -> Result
transMulOp x = case x of
  AbsTinyPlus.Times -> failure x
  AbsTinyPlus.Div -> failure x
  AbsTinyPlus.Mod -> failure x

transRelOp :: AbsTinyPlus.RelOp -> Result
transRelOp x = case x of
  AbsTinyPlus.LTH -> failure x
  AbsTinyPlus.LE -> failure x
  AbsTinyPlus.GTH -> failure x
  AbsTinyPlus.GE -> failure x
  AbsTinyPlus.EQU -> failure x
  AbsTinyPlus.NE -> failure x
