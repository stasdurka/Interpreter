-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParTinyPlus
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsTinyPlus
import LexTinyPlus

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&'       { PT _ (TS _ 4)  }
  '&&'      { PT _ (TS _ 5)  }
  '('       { PT _ (TS _ 6)  }
  ')'       { PT _ (TS _ 7)  }
  '*'       { PT _ (TS _ 8)  }
  '+'       { PT _ (TS _ 9)  }
  '++'      { PT _ (TS _ 10) }
  ','       { PT _ (TS _ 11) }
  '-'       { PT _ (TS _ 12) }
  '--'      { PT _ (TS _ 13) }
  '/'       { PT _ (TS _ 14) }
  ';'       { PT _ (TS _ 15) }
  '<'       { PT _ (TS _ 16) }
  '<='      { PT _ (TS _ 17) }
  '='       { PT _ (TS _ 18) }
  '=='      { PT _ (TS _ 19) }
  '>'       { PT _ (TS _ 20) }
  '>='      { PT _ (TS _ 21) }
  '['       { PT _ (TS _ 22) }
  ']'       { PT _ (TS _ 23) }
  'boolean' { PT _ (TS _ 24) }
  'else'    { PT _ (TS _ 25) }
  'false'   { PT _ (TS _ 26) }
  'for'     { PT _ (TS _ 27) }
  'if'      { PT _ (TS _ 28) }
  'in'      { PT _ (TS _ 29) }
  'int'     { PT _ (TS _ 30) }
  'main'    { PT _ (TS _ 31) }
  'print'   { PT _ (TS _ 32) }
  'range'   { PT _ (TS _ 33) }
  'return'  { PT _ (TS _ 34) }
  'string'  { PT _ (TS _ 35) }
  'true'    { PT _ (TS _ 36) }
  'while'   { PT _ (TS _ 37) }
  '{'       { PT _ (TS _ 38) }
  '||'      { PT _ (TS _ 39) }
  '}'       { PT _ (TS _ 40) }
  L_Ident   { PT _ (TV $$)   }
  L_integ   { PT _ (TI $$)   }
  L_quoted  { PT _ (TL $$)   }

%%

Ident :: { AbsTinyPlus.Ident }
Ident  : L_Ident { AbsTinyPlus.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsTinyPlus.Program }
Program : ListTopDef 'main' Block { AbsTinyPlus.Program $1 $3 }

TopDef :: { AbsTinyPlus.TopDef }
TopDef
  : Type Ident '(' ListArg ')' Block { AbsTinyPlus.FnDef $1 $2 $4 $6 }

ListTopDef :: { [AbsTinyPlus.TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }

Arg :: { AbsTinyPlus.Arg }
Arg
  : Type Ident { AbsTinyPlus.Arg $1 $2 }
  | Type Ident '[' ']' { AbsTinyPlus.ArrRef $1 $2 }
  | Type '&' Ident { AbsTinyPlus.VarRef $1 $3 }

ListArg :: { [AbsTinyPlus.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Block :: { AbsTinyPlus.Block }
Block
  : '[' ListDecl ']' '{' Stmt '}' { AbsTinyPlus.Block $2 $5 }
  | '{' Stmt '}' { AbsTinyPlus.NoDecl $2 }

Decl :: { AbsTinyPlus.Decl }
Decl : Type Item { AbsTinyPlus.Decl $1 $2 }

Item :: { AbsTinyPlus.Item }
Item
  : Ident { AbsTinyPlus.NoInit $1 }
  | Ident '=' Expr { AbsTinyPlus.Init $1 $3 }
  | Ident '[' Expr ']' { AbsTinyPlus.ArrInit $1 $3 }

ListDecl :: { [AbsTinyPlus.Decl] }
ListDecl : Decl { (:[]) $1 } | Decl ';' ListDecl { (:) $1 $3 }

Stmt :: { AbsTinyPlus.Stmt }
Stmt
  : Stmt Stmt { AbsTinyPlus.Seq $1 $2 }
  | ';' { AbsTinyPlus.Empty }
  | Block { AbsTinyPlus.BStmt $1 }
  | LValue '=' Expr ';' { AbsTinyPlus.Ass $1 $3 }
  | LValue '++' ';' { AbsTinyPlus.Incr $1 }
  | LValue '--' ';' { AbsTinyPlus.Decr $1 }
  | 'return' Expr ';' { AbsTinyPlus.Ret $2 }
  | 'if' '(' Expr ')' Block { AbsTinyPlus.Cond $3 $5 }
  | 'if' '(' Expr ')' Block 'else' Block { AbsTinyPlus.CondElse $3 $5 $7 }
  | 'while' '(' Expr ')' Block { AbsTinyPlus.While $3 $5 }
  | 'for' Ident 'in' 'range' '(' Expr ')' Block { AbsTinyPlus.For $2 $6 $8 }
  | 'print' Expr ';' { AbsTinyPlus.Print $2 }

Type :: { AbsTinyPlus.Type }
Type
  : 'int' { AbsTinyPlus.Int }
  | 'string' { AbsTinyPlus.Str }
  | 'boolean' { AbsTinyPlus.Bool }

ListType :: { [AbsTinyPlus.Type] }
ListType
  : {- empty -} { [] }
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }

LValue :: { AbsTinyPlus.LValue }
LValue
  : Ident { AbsTinyPlus.EVar $1 }
  | Ident '[' Expr ']' { AbsTinyPlus.EArrEl $1 $3 }

Expr6 :: { AbsTinyPlus.Expr }
Expr6
  : LValue { AbsTinyPlus.Elval $1 }
  | Integer { AbsTinyPlus.ELitInt $1 }
  | 'true' { AbsTinyPlus.ELitTrue }
  | 'false' { AbsTinyPlus.ELitFalse }
  | Ident '(' ListExpr ')' { AbsTinyPlus.EApp $1 $3 }
  | String { AbsTinyPlus.EString $1 }
  | Expr7 { $1 }

Expr5 :: { AbsTinyPlus.Expr }
Expr5
  : '-' Expr6 { AbsTinyPlus.Neg $2 }
  | '!' Expr6 { AbsTinyPlus.Not $2 }
  | Expr6 { $1 }

Expr4 :: { AbsTinyPlus.Expr }
Expr4
  : Expr4 MulOp Expr5 { AbsTinyPlus.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { AbsTinyPlus.Expr }
Expr3
  : Expr3 AddOp Expr4 { AbsTinyPlus.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { AbsTinyPlus.Expr }
Expr2
  : Expr2 RelOp Expr3 { AbsTinyPlus.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { AbsTinyPlus.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsTinyPlus.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsTinyPlus.Expr }
Expr : Expr1 '||' Expr { AbsTinyPlus.EOr $1 $3 } | Expr1 { $1 }

Expr7 :: { AbsTinyPlus.Expr }
Expr7 : '(' Expr ')' { $2 }

ListExpr :: { [AbsTinyPlus.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsTinyPlus.AddOp }
AddOp : '+' { AbsTinyPlus.Plus } | '-' { AbsTinyPlus.Minus }

MulOp :: { AbsTinyPlus.MulOp }
MulOp
  : '*' { AbsTinyPlus.Times }
  | '/' { AbsTinyPlus.Div }
  | '%' { AbsTinyPlus.Mod }

RelOp :: { AbsTinyPlus.RelOp }
RelOp
  : '<' { AbsTinyPlus.LTH }
  | '<=' { AbsTinyPlus.LE }
  | '>' { AbsTinyPlus.GTH }
  | '>=' { AbsTinyPlus.GE }
  | '==' { AbsTinyPlus.EQU }
  | '!=' { AbsTinyPlus.NE }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

