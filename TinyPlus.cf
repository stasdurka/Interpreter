-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] "main" Block;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type Ident;

ArrRef.     Arg ::= Type Ident "[" "]";

VarRef.     Arg ::= Type "&" Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.        Block ::= "[" [Decl] "]" "{"  Stmt "}" ;

NoDecl.  Block ::= "{" Stmt "}" ;

Decl.      Decl ::= Type Item ;

-- DeclEmpty. Decl ::= "" ;

NoInit.    Item ::= Ident ; 

separator nonempty Decl ";" ;

Init.      Item ::= Ident "=" Expr ;

ArrInit.   Item ::= Ident "[" Expr "]" ;  -- initialize array of size Expr

Seq.       Stmt ::= Stmt Stmt ;

-- separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Ass.       Stmt ::= LValue "=" Expr  ";" ;

Func.       Stmt ::= Expr ";" ;

-- Incr.      Stmt ::= LValue "++"  ";" ;

-- Decr.      Stmt ::= LValue "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Block  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

While.     Stmt ::= "while" "(" Expr ")" Block ;

For.       Stmt ::= "for" Ident "in range" "(" Expr ")" Block ;

Print.     Stmt ::= "print" Expr ";" ;

-- SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      LValue ::= Ident ;

EArrEl.    LValue ::= Ident "[" Expr "]" ;

Elval.     Expr6 ::= LValue ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
    
EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 7 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

